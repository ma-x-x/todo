# 工作流名称：部署到云服务器
name: Deploy to Cloud

# 触发条件
on:
  # 当推送到 main 分支时触发
  push:
    branches: [ main ]
  # 当对 main 分支发起 PR 时触发
  pull_request:
    branches: [ main ]
  # 允许手动触发工作流
  workflow_dispatch:

# 工作流任务
jobs:
  # 部署任务
  deploy:
    # 指定运行环境为最新版 Ubuntu
    runs-on: ubuntu-latest
    # 使用生产环境配置
    environment: production
    
    # 任务步骤
    steps:
    # 1. 检出代码
    - name: 检出代码
      uses: actions/checkout@v4
    
    # 2. 设置 Go 环境
    - name: 配置 Go 开发环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'  # 使用 Go 1.22 版本
        
    # 3. 缓存 Go 依赖
    - name: 缓存 Go 模块
      uses: actions/cache@v3
      with:
        # 缓存路径配置
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        # 缓存键，基于 go.sum 文件的哈希值
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
        
    # 4. 下载项目依赖
    - name: 下载依赖包
      run: go mod download
        
    # 5. 安装 Swagger 工具
    - name: 安装 Swagger
      run: go install github.com/swaggo/swag/cmd/swag@latest
        
    # 6. 生成 API 文档
    - name: 生成 Swagger 文档
      run: |
        rm -rf docs/
        swag init -g cmd/server/main.go --parseDependency --parseInternal --parseDepth 1
        
    # 7. 构建应用
    - name: 构建应用程序
      run: |
        rm -f build/todo-api
        # 使用 ldflags 注入版本信息和构建时间
        CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w \
          -X main.Version=${{ github.sha }} \
          -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o build/todo-api cmd/server/main.go
        
    # 8. 准备部署文件
    - name: 准备部署文件
      run: |
        # 创建部署目录结构
        mkdir -p deployment/configs
        mkdir -p deployment/scripts
        # 复制必要的文件到部署目录
        cp build/todo-api deployment/
        cp configs/config.prod.yaml deployment/configs/
        cp deployments/docker/docker-compose.prod.yml deployment/docker-compose.yml
        cp deployments/docker/Dockerfile deployment/
        cp deployments/scripts/deploy.sh deployment/
        cp deployments/scripts/setup_system.sh deployment/
        cp scripts/init.sql deployment/scripts/
        # 设置脚本执行权限
        chmod +x deployment/deploy.sh
        chmod +x deployment/setup_system.sh
        
    # 9. 将文件复制到服务器
    - name: 复制文件到服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        source: "deployment/*"
        target: "/opt/todo-api"
        strip_components: 1  # 去除 deployment 前缀
        
    # 10. 配置系统参数
    - name: 配置系统参数
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd /opt/todo-api
          # 设置脚本执行权限
          sudo chmod +x setup_system.sh
          # 执行系统参数配置，即使失败也继续部署
          sudo ./setup_system.sh || echo "系统参数设置失败，但继续部署"
    
    # 11. 执行部署脚本
    - name: 执行部署脚本
      uses: appleboy/ssh-action@v1.0.3
      # 设置环境变量
      env:
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}  # MySQL root 密码
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}                 # 数据库用户密码
        DB_HOST: "mysql"                                        # 数据库主机名
        DB_USER: "todo_user"                                    # 数据库用户名
        JWT_SECRET: ${{ secrets.JWT_SECRET }}                   # JWT 密钥
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}           # Redis 密码
        APP_ENV: prod                                          # 应用环境
        LOG_LEVEL: info                                        # 日志级别
        TZ: Asia/Shanghai                                      # 时区设置
        BUILD_VERSION: ${{ github.sha }}                       # 构建版本（使用 commit hash）
        SWAGGER_HOST: ${{ secrets.SERVER_HOST }}               # Swagger 文档主机
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        # 传递环境变量到远程服务器
        envs: MYSQL_ROOT_PASSWORD,DB_PASSWORD,DB_HOST,DB_USER,JWT_SECRET,REDIS_PASSWORD,APP_ENV,LOG_LEVEL,TZ,BUILD_VERSION,SWAGGER_HOST
        command_timeout: "20m"  # 命令超时时间设置为20分钟
        script: |
          cd /opt/todo-api
          chmod +x deploy.sh
          ./deploy.sh 