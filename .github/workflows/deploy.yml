name: Deploy to Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    # 缓存 Go modules
    - name: Go Module Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
        
    - name: Download dependencies
      run: go mod download
        
    - name: Install swag
      run: go install github.com/swaggo/swag/cmd/swag@latest
        
    # Swagger 文档生成不使用缓存，因为它依赖于源代码注释
    - name: Generate Swagger Docs
      run: |
        # 清理之前的文档
        rm -rf docs/
        swag init -g cmd/server/main.go --parseDependency --parseInternal --parseDepth 1
        
    # 构建阶段不使用缓存，因为它依赖于源代码
    - name: Build
      run: |
        # 清理之前的构建
        rm -f build/todo-api
        CGO_ENABLED=0 GOOS=linux go build -o build/todo-api cmd/server/main.go
        
    - name: Create deployment directory
      run: |
        mkdir -p deployment/configs
        mkdir -p deployment/scripts
        cp build/todo-api deployment/
        cp configs/config.prod.yaml deployment/configs/
        cp deployments/docker/docker-compose.prod.yml deployment/docker-compose.yml
        cp deployments/docker/Dockerfile deployment/
        cp deployments/scripts/deploy.sh deployment/
        cp scripts/init.sql deployment/scripts/
        chmod +x deployment/deploy.sh
        
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        source: "deployment/*"
        target: "/opt/todo-api"
        strip_components: 1
        
    - name: Setup system parameters
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # 创建系统参数配置文件
          sudo tee /etc/sysctl.d/99-redis.conf << EOF
          vm.overcommit_memory = 1
          net.core.somaxconn = 512
          EOF
          
          # 应用系统参数
          sudo sysctl -p /etc/sysctl.d/99-redis.conf
          
          # 禁用 THP
          sudo bash -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'
          sudo bash -c 'echo never > /sys/kernel/mm/transparent_hugepage/defrag'
          
          # 创建持久化的 THP 设置
          sudo tee /etc/systemd/system/disable-thp.service << EOF
          [Unit]
          Description=Disable Transparent Huge Pages (THP)
          
          [Service]
          Type=oneshot
          ExecStart=/bin/sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag'
          RemainAfterExit=yes
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # 启用并启动服务
          sudo systemctl daemon-reload
          sudo systemctl enable disable-thp
          sudo systemctl start disable-thp
    
    - name: Execute deployment script
      uses: appleboy/ssh-action@v1.0.3
      env:
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: "mysql"
        DB_USER: "todo_user"
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        APP_ENV: prod
        LOG_LEVEL: debug
        TZ: Asia/Shanghai
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        envs: MYSQL_ROOT_PASSWORD,DB_PASSWORD,DB_HOST,DB_USER,JWT_SECRET,REDIS_PASSWORD,APP_ENV,LOG_LEVEL,TZ
        script: |
          cd /opt/todo-api
          export MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}"
          export DB_PASSWORD="${DB_PASSWORD}"
          export JWT_SECRET="${JWT_SECRET}"
          export REDIS_PASSWORD="${REDIS_PASSWORD:-''}"
          export APP_ENV="prod"
          export LOG_LEVEL="debug"
          chmod +x deploy.sh
          ./deploy.sh 